[config]
default_to_workspace = false
skip_core_tasks = true

[env]
TARGET = "wasm32-unknown-unknown"
TARGET_DIR = "${PWD}/res"
FWD_WASM_FILE = "aurora-forwarder.wasm"
FWD_FACTORY_WASM_FILE = "aurora-forwarder-factory.wasm"
FEES_WASM_FILE = "aurora-forwarder-fees.wasm"

[tasks.build]
dependencies = [
    "build-forwarder",
    "build-fees",
    "cp-contracts",
    "optimize-forwarder",
    "build-factory",
    "cp-factory",
    "contract-stats",
]

[tasks.clippy]
command = "cargo"
dependencies = [
    "build-forwarder",
    "cp-forwarder",
]
args = [
    "clippy",
    "--workspace",
    "--all-targets"
]

[tasks.test]
alias = "tests"

[tasks.tests]
dependencies = [
    "build"
]
command = "cargo"
args = [
    "test",
    "--all-targets",
    "${@}"
]

[tasks.build-forwarder]
command = "cargo"
env = { "RUSTFLAGS" = "-C link-arg=-s" }
args = [
    "build",
    "--target",
    "${TARGET}",
    "--release",
    "--package",
    "aurora-forwarder"
]

[tasks.build-fees]
command = "cargo"
install_crate = { crate_name = "cargo-near", binary = "cargo", min_version = "0.14.1", test_arg = ["near", "-h"], force = true }
args = [
    "near",
    "build",
    "non-reproducible-wasm",
    "--out-dir",
    "${TARGET_DIR}",
    "--manifest-path",
    "fees/Cargo.toml",
    "--no-embed-abi",
    "--no-abi",
]

[tasks.optimize-forwarder]
dependencies = ["download-wasm-opt"]
script = '''
   filesize_before=$(wc -c ${TARGET_DIR}/${FWD_WASM_FILE} | awk '{print $1}')
   ${TARGET_DIR}/binaryen/bin/wasm-opt -Os ${TARGET_DIR}/${FWD_WASM_FILE} -o ${TARGET_DIR}/${FWD_WASM_FILE}
   filesize_after=$(wc -c ${TARGET_DIR}/${FWD_WASM_FILE} | awk '{print $1}')
   echo "File size before: [$filesize_before] and after: [$filesize_after]"
 '''

[tasks.download-wasm-opt]
script_runner = "bash"
script = '''
if [[ ! -f ${TARGET_DIR}/binaryen/bin/wasm-opt ]]; then
  mkdir -p ${TARGET_DIR}/binaryen

  if [[ "$OSTYPE" == "darwin"* ]]; then
    if [[ $(uname -m) == "arm64" ]]; then
      os="arm64-macos"
    else
      os="x86_64-macos"
    fi
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if [[ $(uname -m) == "x86_64" ]]; then
      os="x86_64-linux"
    else
      os="aarch64-linux"
    fi
  else
     exit 1
  fi

  curl -sL https://github.com/WebAssembly/binaryen/releases/download/version_117/binaryen-version_117-${os}.tar.gz | tar -xz -C ${TARGET_DIR}/binaryen
  mv ${TARGET_DIR}/binaryen/binaryen-version_117/bin ${TARGET_DIR}/binaryen
  mv ${TARGET_DIR}/binaryen/binaryen-version_117/lib ${TARGET_DIR}/binaryen
  rm -rf ${TARGET_DIR}/binaryen/binaryen-version_117
fi
'''

[tasks.build-factory]
command = "cargo"
install_crate = { crate_name = "cargo-near", binary = "cargo", min_version = "0.14.1", test_arg = ["near", "-h"], force = true }
args = [
    "near",
    "build",
    "non-reproducible-wasm",
    "--out-dir",
    "${TARGET_DIR}",
    "--manifest-path",
    "factory/Cargo.toml",
    "--no-embed-abi",
    "--no-abi",
]

[tasks.cp-contracts]
script = """
mv target/${TARGET}/release/aurora_forwarder.wasm ${TARGET_DIR}/${FWD_WASM_FILE}
mv ${TARGET_DIR}/aurora_forwarder_fees.wasm ${TARGET_DIR}/${FEES_WASM_FILE}
"""

[tasks.cp-forwarder]
script = """
cp target/${TARGET}/release/aurora_forwarder.wasm ${TARGET_DIR}/${FWD_WASM_FILE}
"""

[tasks.cp-factory]
script = """
mv ${TARGET_DIR}/aurora_forwarder_factory.wasm ${TARGET_DIR}/${FWD_FACTORY_WASM_FILE}
"""

[tasks.clean]
dependencies = ["rm-contracts"]
command = "cargo"
args = ["clean"]

[tasks.rm-contracts]
script = "rm -rf ${TARGET_DIR}/aurora-forwarder*.wasm ${TARGET_DIR}/binaryen"

[tasks.contract-stats]
category = "Tools"
script = '''
echo "Environment:"
echo "    CARGO_MAKE_PROFILE:   ${CARGO_MAKE_PROFILE}"
echo "    FWD_FILE:             ${FWD_WASM_FILE}"
echo "    FWD_SIZE_FILE:        $(wc -c ${TARGET_DIR}/${FWD_WASM_FILE} | awk '{print $1}')"
echo "    FACTORY_FILE:         ${FWD_FACTORY_WASM_FILE}"
echo "    FACTORY_SIZE_FILE:    $(wc -c ${TARGET_DIR}/${FWD_FACTORY_WASM_FILE} | awk '{print $1}')"
echo "    FEES_FILE:            ${FEES_WASM_FILE}"
echo "    FEES_SIZE_FILE:       $(wc -c ${TARGET_DIR}/${FEES_WASM_FILE} | awk '{print $1}')"
echo "    TARGET_DIR:           ${TARGET_DIR}"
echo "    RUSTFLAGS:            ${RUSTFLAGS}"
echo "    Extra build args:     ${RELEASE} ${@}"
'''
